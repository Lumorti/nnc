#! /usr/bin/python3

import sys
from PIL import Image, ImageDraw
from pathlib import Path
import numpy as np

import os
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'

import tensorflow as tf
tf.keras.backend.set_floatx("float64")
# os.environ['CUDA_VISIBLE_DEVICES'] = '-1'

nncSettings = {

    # Changing any of these requires retraining/recompressing
    "kernelSize": 5,
    "stripMethod": "grid",
    "stripColor": (255, 255, 255),
    "edgeColor": (255, 255, 255),
    "everyX": 1,
    "everyY": 2,
    "middleLayerSize": 256,
    "modelFile": "nncData.h5",
    "epochs": 10,
    "maxPerImage": 300000,

}

# Strip an image
def compress(files):

    # Loop over the non-nnc files listed
    for fileName in files:
        if ".nnc" not in fileName:

            newFileName = fileName[:fileName.find(".")] + ".nnc"
            print("compressing " + fileName + " -> " + newFileName)

            # Load the uncompressed image
            img = Image.open(fileName)

            # Using the grid method
            if nncSettings["stripMethod"] == "grid":

                imgMin = Image.new('RGB', (int(img.size[0]/nncSettings["everyX"]), int(img.size[1]/nncSettings["everyY"])), nncSettings["edgeColor"])
                imgData = np.array(img)
                imgMinData = np.array(imgMin)

                for x in range(0, img.size[0]-1, nncSettings["everyX"]):
                    for y in range(0, img.size[1]-1, nncSettings["everyY"]):

                        imgMinData[int(y/nncSettings["everyY"]), int(x/nncSettings["everyX"]), :] = np.array(imgData[y, x, :])

                imgMin = Image.fromarray(imgMinData)
                imgMin.save(newFileName, "png")

# Train on image data
def train(files):

    # Create a new model
    nncNet = tf.keras.models.Sequential([
        tf.keras.layers.Flatten(input_shape=(nncSettings["kernelSize"], nncSettings["kernelSize"], 3)),
        tf.keras.layers.Dense(nncSettings["middleLayerSize"], activation='relu'),
        tf.keras.layers.Dropout(0.2),
        tf.keras.layers.Dense(3)
    ])

    # Arrays for the training data (converted to np arrays later)
    inputs = []
    outputs = []

    # Cache for speed
    width = nncSettings["kernelSize"]
    halfWidth = int((width - 1) / 2)
    stripColorNP = np.array(nncSettings["stripColor"]) / 255.0

    # Loop over the non-nnc files
    for fileName in files:
        ext = fileName[fileName.find(".")+1:]
        if ext in ["png", "jpg", "jpeg"]:

            print("loading data from " + fileName)

            # Load the original file
            img = Image.open(fileName)
            imgData = np.array(img)

            # Get the inflated compressed version
            imgComp = Image.new('RGB', (img.size[0], img.size[1]), nncSettings["stripColor"])
            imgCompData = np.array(imgComp)
            for x in range(0, img.size[0]-1, nncSettings["everyX"]):
                for y in range(0, img.size[1]-1, nncSettings["everyY"]):
                    imgCompData[y, x, :] = np.array(imgData[y, x, :])
            imgComp = Image.fromarray(imgCompData)

            # Add padding around the edges for both
            imgPad = Image.new('RGB', (img.size[0]+width-1, img.size[1]+width-1), nncSettings["edgeColor"])
            imgPad.paste(img, (halfWidth, halfWidth))
            imgCompPad = Image.new('RGB', (img.size[0]+width-1, img.size[1]+width-1), nncSettings["edgeColor"])
            imgCompPad.paste(imgComp, (halfWidth, halfWidth))

            # Convert it to a numpy (y,x,0:3) array
            imgPadData = np.array(imgPad) / 255.0
            imgCompPadData = np.array(imgCompPad) / 255.0

            # Keep track of how many samples have been gathered from the image
            numFromImage = 0

            # For each pixel 
            for y in range(halfWidth, imgPad.size[1]-halfWidth, 3):
                for x in range(halfWidth, imgPad.size[0]-halfWidth, 3):

                    # If this pixel would normally need to be interpolated
                    if np.allclose(imgCompPadData[y, x, 0:3], stripColorNP):

                        # Get the width by width by 3 matrix of pixels around it
                        grid = np.array(imgCompPadData[y-halfWidth:y+halfWidth+1, x-halfWidth:x+halfWidth+1, 0:3])

                        # Add the center pixel to the outputs
                        outputs.append(np.array(imgPadData[y, x, 0:3]))

                        # Add the grid to the inputs
                        inputs.append(grid)

                        # Keep track of how many samples have been gathered from the image
                        numFromImage += 1

                        # Stop once enough samples have been gathered
                        if numFromImage > nncSettings["maxPerImage"]:
                            break

                # Stop once enough samples have been gathered
                if numFromImage > nncSettings["maxPerImage"]:
                    break

    # Convert them to numpy arrays
    inputs = np.array(inputs)
    outputs = np.array(outputs)

    print("loaded " + str(len(inputs)) + " pairs total")

    # Set up the loss function
    lossFunction = tf.keras.losses.MeanAbsoluteError()
    optimiser = tf.keras.optimizers.Adam(learning_rate=0.0001)

    # Compile the model
    nncNet.compile(optimizer=optimiser, loss=lossFunction, metrics=['accuracy'])

    # Train the model
    nncNet.fit(inputs, outputs, epochs=nncSettings["epochs"])

    # Save the model
    nncNet.save(nncSettings["modelFile"])

# Decompress an image
def decompress(files):
    
    # Load the model if it exists
    path = os.path.realpath(__file__)[:-3] + nncSettings["modelFile"]
    if os.path.exists(path):
        nncNet = tf.keras.models.load_model(path)
    else:
        print("ERROR - missing the model file")
        exit()

    # Cache for speed
    width = nncSettings["kernelSize"]
    halfWidth = int((width - 1) / 2)
    stripColorNP = np.array(nncSettings["stripColor"]) / 255.0

    # Loop over all nnc files specified
    for fileName in files:
        if ".nnc" in fileName:

            # New file name is the .png of the old one
            newFileName = fileName[:fileName.find(".")] + ".png"
            print("decompressing " + fileName + " -> " + newFileName)
 
            # Load the file
            imgComp = Image.open(fileName)
            imgCompData = np.array(imgComp)

            # Inflate the compressed version, filling with a colour
            imgInfl = Image.new('RGB', (imgComp.size[0]*nncSettings["everyX"], imgComp.size[1]*nncSettings["everyY"]), nncSettings["stripColor"])
            imgInflData = np.array(imgInfl)
            for x in range(0, imgComp.size[0], 1):
                for y in range(0, imgComp.size[1], 1):
                    imgInflData[y*nncSettings["everyY"], x*nncSettings["everyX"], :] = np.array(imgCompData[y, x, :])
            imgInfl = Image.fromarray(imgInflData)

            # Add padding around the edges 
            imgInflPad = Image.new('RGB', (imgInfl.size[0]+width-1, imgInfl.size[1]+width-1), nncSettings["edgeColor"])
            imgInflPad.paste(imgInfl, (halfWidth, halfWidth))

            # To hold the neural net evaluations
            mapping = []
            toEval = []

            # Convert it to a numpy (y,x,0:3) array
            imgInflPadData = np.array(imgInflPad) / 255.0

            # For each pixel 
            for y in range(halfWidth, imgInflPad.size[1]-halfWidth, 1):
                for x in range(halfWidth, imgInflPad.size[0]-halfWidth, 1):

                    # If this pixel needs to be interpolated TODO this is most of the time
                    if np.allclose(imgInflPadData[y, x, 0:3], stripColorNP):

                        # Get the width by width matrix of pixels around it
                        grid = np.array(imgInflPadData[y-halfWidth:y+halfWidth+1, x-halfWidth:x+halfWidth+1, 0:3])

                        # Add the grid to list of things to evaluate using the net
                        toEval.append(grid)
                        mapping.append((y, x))

            toEval = np.array(toEval)

            numPer = 100000
            for i in range(0, len(toEval)-1, numPer):

                # Use the net to get the predictions
                predictions = nncNet(toEval[i:i+numPer]).numpy()

                # Set the pixels using these predictions
                for index, coord in enumerate(mapping[i:i+numPer]):
                    imgInflPadData[coord[0], coord[1], 0:3] = predictions[index, 0:3] 

            # Put the modified pixels back into the image object
            imgInflPad = Image.fromarray(np.uint8(imgInflPadData * 255.0))

            # Crop out the whitespace
            newImg = imgInflPad.crop((halfWidth, halfWidth, imgInflPad.size[0]-halfWidth, imgInflPad.size[1]-halfWidth))

            # Save it
            newImg.save(newFileName, "png")

if __name__ == "__main__":

    task = "help"
    files = []
    for arg in sys.argv[1:]:

        if arg in ["-c", "--compress"]:
            task = "compress"
        elif arg in ["-d", "--decompress"]:
            task = "decompress"
        elif arg in ["-t", "--train"]:
            task = "train"
        elif arg in ["-h", "--help"]:
            task = "help"
        else:
            files.append(arg)

    if task == "help":

        print("NNC - Neural Net Compression")
        print("Usage: nnc [flags] [files]")
        print("")
        print("Flags")
        print("-h --help        print this message")
        print("-c --compress    compress the images")
        print("-d --decompress  decompress the images")
        print("-t --train       train the neural net on uncompressed images")

    elif task == "compress":

        compress(files)

    elif task == "decompress":

        decompress(files)

    elif task == "train":

        train(files)

